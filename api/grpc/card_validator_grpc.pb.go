// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.3
// source: api/grpc/card_validator.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CardValidatorServiceClient is the client API for CardValidatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardValidatorServiceClient interface {
	Validate(ctx context.Context, in *Card, opts ...grpc.CallOption) (*ValidateResult, error)
}

type cardValidatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardValidatorServiceClient(cc grpc.ClientConnInterface) CardValidatorServiceClient {
	return &cardValidatorServiceClient{cc}
}

func (c *cardValidatorServiceClient) Validate(ctx context.Context, in *Card, opts ...grpc.CallOption) (*ValidateResult, error) {
	out := new(ValidateResult)
	err := c.cc.Invoke(ctx, "/grpc.CardValidatorService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardValidatorServiceServer is the server API for CardValidatorService service.
// All implementations should embed UnimplementedCardValidatorServiceServer
// for forward compatibility
type CardValidatorServiceServer interface {
	Validate(context.Context, *Card) (*ValidateResult, error)
}

// UnimplementedCardValidatorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCardValidatorServiceServer struct {
}

func (UnimplementedCardValidatorServiceServer) Validate(context.Context, *Card) (*ValidateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}

// UnsafeCardValidatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardValidatorServiceServer will
// result in compilation errors.
type UnsafeCardValidatorServiceServer interface {
	mustEmbedUnimplementedCardValidatorServiceServer()
}

func RegisterCardValidatorServiceServer(s grpc.ServiceRegistrar, srv CardValidatorServiceServer) {
	s.RegisterService(&CardValidatorService_ServiceDesc, srv)
}

func _CardValidatorService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardValidatorServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.CardValidatorService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardValidatorServiceServer).Validate(ctx, req.(*Card))
	}
	return interceptor(ctx, in, info, handler)
}

// CardValidatorService_ServiceDesc is the grpc.ServiceDesc for CardValidatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardValidatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.CardValidatorService",
	HandlerType: (*CardValidatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _CardValidatorService_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/card_validator.proto",
}
